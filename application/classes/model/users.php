<?phpclass Model_Users extends ORM{  protected $_table_name  = 'users'; // default: accounts  protected $_primary_key = 'id';      // default: id 	public function validate_create(& $array) 	{		// Initialise the validation library and setup some rules			$array = Validate::factory($array)						->rules('password', $this->_rules['password'])						->rules('username', $this->_rules['username'])						->rules('email', $this->_rules['email'])						->rules('password_confirm', $this->_rules['password_confirm'])						->filter('username', 'trim')						->filter('email', 'trim')						->filter('password', 'trim')						->filter('affiliate', 'trim')						->filter('password_confirm', 'trim'); 		#Executes username callbacks defined in parent				foreach($this->_callbacks['username'] as $callback){			$array->callback('username', array($this, $callback));		}         #Executes email callbacks defined in parent			foreach($this->_callbacks['email'] as $callback){			$array->callback('email', array($this, $callback));		}				return $array;	}        public function getGenealogyDownline()	{             $logged_in_userid = Auth::instance()->get_user()->id;             if(isset($_POST['search_str']) || isset($_POST['filter_search']))               {                   $downlines = $this->searchforGenealogyDownline();               }              else              {                 $downlines = DB::select('prospects.*', 'users.id','country.country_name')                    ->from('prospects')                    ->where('prospects.user_id', '=',  $logged_in_userid)                            ->join('users','right')                            ->on('prospects.id', '=', 'users.prospect_id')                            ->join('country','left')                            ->on('prospects.country_id', '=', 'country.country_id')                    //->limit(1)                    ->execute();              }             return $downlines;        }       public function insertUserAddress($userid)         {             try              {                  DB::insert('user_address', array('user_id','address1','address2','city','statecode','countrycode','postalcode','phone1'))                      ->values(array($userid,$_POST['address1'],$_POST['address2'],$_POST['city'],$_POST['state'],$_POST['countryid'],$_POST['zip'],$_POST['phone']))                      ->execute();              }              catch ( Database_Exception $e )              {                  echo $e->getMessage();              }         }       public function insertUserRole($userid)         {             try              {                  DB::insert('roles_users', array('user_id','role_id'))                      ->values(array($userid,1))                      ->execute();              }              catch ( Database_Exception $e )              {                  echo $e->getMessage();              }         }            public function updateProspectTbl($prospectid)      {           try              {                  DB::update('prospects')->set(array('is_user' => 'yes'))                                            ->where('id','=',$prospectid)->execute();              }           catch ( Database_Exception $e )              {                  echo $e->getMessage();              }      }       public function getAllUser()	{             $users = DB::select()		->from('users')		->execute()->as_array();             return $users;        }                public function searchforGenealogyDownline()        {            $logged_in_userid = Auth::instance()->get_user()->id;            $prospects = ORM::factory('prospects');            $user_role = Session::instance()->get('user_role_id');                                    if(isset($_POST['search_str']))               {                    $genealogy_list = DB::select('prospects.*', 'users.id','country.country_name');                    $genealogy_list = $genealogy_list->from('prospects');                    $genealogy_list = $genealogy_list->where('prospects.user_id', '=',  $logged_in_userid);                    $genealogy_list = $genealogy_list->and_where('prospects.first_name', 'like', '%'.$_POST['search_str'].'%');                    $genealogy_list = $genealogy_list->join('users','right');                    $genealogy_list = $genealogy_list->on('prospects.id', '=', 'users.prospect_id');                    $genealogy_list = $genealogy_list->join('country','left');                    $genealogy_list = $genealogy_list->on('prospects.country_id', '=', 'country.country_id');                    $genealogy_list = $genealogy_list->execute();               }               else if(isset($_POST['filter_search']))               {                    $genealogy_list = DB::select('prospects.*', 'users.id','country.country_name');                    $genealogy_list = $genealogy_list->from('prospects');                    $genealogy_list = $genealogy_list->where('prospects.user_id', '=',  $logged_in_userid);                                        $genealogy_list = $genealogy_list->where_open();                    $genealogy_list= $genealogy_list->and_where('prospects.first_name', 'like', '%'.$_POST['filter_search'].'%');                    $genealogy_list= $genealogy_list->or_where('prospects.last_name', 'like', '%'.$_POST['filter_search'].'%');                    $genealogy_list = $genealogy_list->where_close();                   /* if($_POST['filter_email']!='')                        $prospects_list= $prospects_list->where('email', 'like', '%'.$_POST['filter_email'].'%');                    if($_POST['filter_phone']!='')                        $prospects_list= $prospects_list->where('phone', 'like', '%'.$_POST['filter_phone'].'%');*/                   if($_POST['filter_location']!='')                        $genealogy_list= $genealogy_list->where('prospects.country_name', 'like', '%'.$_POST['filter_location'].'%');                   if($_POST['filter_binary']!='')                        $genealogy_list= $genealogy_list->where('prospects.binary_side', 'like', '%'.$_POST['filter_binary'].'%');                                      if($_POST['from']!='')                        $genealogy_list= $genealogy_list->where('prospects.created_date', '>=', ''.date('Y-m-d',strtotime($_POST['from'])).'');                    if($_POST['to']!='')                       $genealogy_list= $genealogy_list->where('prospects.created_date', '<=', ''.date('Y-m-d',strtotime($_POST['to'])).'');                                        $genealogy_list = $genealogy_list->join('users','right');                    $genealogy_list = $genealogy_list->on('prospects.id', '=', 'users.prospect_id');                    $genealogy_list = $genealogy_list->join('country','left');                    $genealogy_list = $genealogy_list->on('prospects.country_id', '=', 'country.country_id');                    $genealogy_list = $genealogy_list->execute();                                   }                               return $genealogy_list;                    }       //get all user by pagging       function getAllUserByPagging(){            $logged_in_userid = Auth::instance()->get_user()->id;            $users_list = $this->select('users.*');                        if($_POST['lead_user_id']!='')                $users_list= $users_list->where('id', '=', $_POST['lead_user_id']);            if($_POST['lead_user_first_name']!='')                $users_list= $users_list->where('first_name', 'like', '%'.$_POST['lead_user_first_name'].'%');            if($_POST['lead_user_last_name']!='')                $users_list= $users_list->where('last_name', 'like', '%'.$_POST['lead_user_last_name'].'%');                        if($_POST['lead_user_email']!='')                $users_list= $users_list->where('email', 'like', '%'.$_POST['lead_user_email'].'%');                        $users_list = $users_list->find_all();            $users_list = $users_list->as_array();            $count_users_list = count($users_list);          // Create an instance of Pagination class and set values            $pagination_users = Pagination::factory(array(                    'total_items'    => $count_users_list,                    'items_per_page' => 10,            ));            $users_list = $this->select('users.*');            if($_POST['lead_user_id']!='')                $users_list= $users_list->where('id', '=', $_POST['lead_user_id']);            if($_POST['lead_user_first_name']!='')                $users_list= $users_list->where('first_name', 'like', '%'.$_POST['lead_user_first_name'].'%');            if($_POST['lead_user_last_name']!='')                $users_list= $users_list->where('last_name', 'like', '%'.$_POST['lead_user_last_name'].'%');            if($_POST['lead_user_email']!='')                $users_list= $users_list->where('email', 'like', '%'.$_POST['lead_user_email'].'%');                        $users_list = $users_list->limit($pagination_users->items_per_page);            $users_list = $users_list->offset($pagination_users->offset);            $users_list = $users_list->find_all();            $users_list = $users_list->as_array();            $page_links_pagging_users = $pagination_users->render();            $return_users_data['users_list'] = $users_list;            $return_users_data['count_users_list'] = $count_users_list;            $return_users_data['page_links_pagging_users'] = $page_links_pagging_users;            return $return_users_data;        }        //get user by id        function getUserById($userId)        {             $users = DB::select()		->from('users')                ->where('id', '=', $userId)		->execute()->as_array();             return $users[0];        }        //get user by prospect id        function getUserByProspectId($prospectId)        {             $users = DB::select()		->from('users')                ->where('prospect_id', '=', $prospectId)		->execute()->as_array();             return $users[0];        }        //update updateLeadAllocationLeft        function updateLeadAllocationLeft ($userId,$lead_allocation_left )        {            $total_rows = DB::update('users')->set(array('lead_allocation_left' => $lead_allocation_left))                                    ->where('id','=',$userId)->execute();            return $total_rows;        }        // get users left and right child details        function getUserChildrenDetails($leftChildId,$rightChildId){             $usersChildsLists = DB::select()		->from('users')                ->where('id', '=', $leftChildId)                ->or_where('id', '=', $rightChildId)		->execute()->as_array();             return $usersChildsLists;        }        // is allowed advanced allocation        function isAllowedAdvancedAllocation($prospectId)        {             $prospects = DB::select()		->from('prospects')                ->where('id', '=', $prospectId)		->execute()->as_array();             return $prospects[0]['allow_advanced_allocation'];        }}?>