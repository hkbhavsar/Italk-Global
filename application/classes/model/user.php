<?phpclass Model_User extends Model_Auth_User{  protected $_table_name  = 'users'; // default: accounts  protected $_primary_key = 'id';      // default: id	public function validate_create(& $array) 	{		// Initialise the validation library and setup some rules			$array = Validate::factory($array)						->rules('password', $this->_rules['password'])						->rules('username', $this->_rules['username'])						->rules('email', $this->_rules['email'])						->rules('password_confirm', $this->_rules['password_confirm'])						->filter('username', 'trim')						->filter('email', 'trim')						->filter('password', 'trim')						->filter('affiliate', 'trim')						->filter('password_confirm', 'trim'); 		#Executes username callbacks defined in parent				foreach($this->_callbacks['username'] as $callback){			$array->callback('username', array($this, $callback));		}         #Executes email callbacks defined in parent			foreach($this->_callbacks['email'] as $callback){			$array->callback('email', array($this, $callback));		}				return $array;	}               /**	 * Validates login information from an array, and optionally redirects	 * after a successful login.	 *	 * @param   array    values to check	 * @param   string   URI or URL to redirect to	 * @return  boolean	 */	public function login(array & $array, $redirect = FALSE)	{                		$fieldname = $this->unique_key($array['username']);		$array = Validate::factory($array)			->label('username', $this->_labels[$fieldname])			->label('password', $this->_labels['password'])			->filter(TRUE, 'trim')			->rules('username', $this->_rules[$fieldname])			->rules('password', $this->_rules['password']);                		// Get the remember login option		$remember = isset($array['remember']);		// Login starts out invalid		$status = FALSE;		//if ($array->check())		//{			// Attempt to load the user			$this->where($fieldname, '=', $array['username'])->find();			if ($this->loaded() AND Auth::instance()->login($this, $array['password'], $remember))			{				if (is_string($redirect))				{					// Redirect after a successful login					Request::instance()->redirect($redirect);				}				// Login is successful				$status = TRUE;			}			else			{							$errors = array(                                "success" => false,                                "error" => "username or password is wrong..!!",                                "fail" => true                            );                                         $LoginErrors = array(                                "success" => false,                                "error" => "username or password is wrong..!!",                                "fail" => true                            );                                                      //echo $loginJSONerror = json_encode($LoginErrors);exit;							}		//}                              $array['errors']= $errors;                                		return $status;              	}}